package mnotes;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;

public class NoteEditor extends javax.swing.JFrame {

    ArrayList<String> imageList = new ArrayList<>();
    Note note = null;
    int numImages = 0;
    private final ArrayList<Note> noteList;
    DefaultListModel<String> noteListModel;
    
    
    NoteEditor(Note note, ArrayList<Note> noteList, DefaultListModel<String> noteListModel) {
        initComponents();
        
        this.noteList = noteList;
        this.noteListModel = noteListModel;
        this.note = note;
        
        if(note != null) {
            TitleBox.setEditable(false);
            TitleBox.setText(note.title);
            ContentBox.setText(Util.readFile(note.contentFile));
            try {
                PreviewPane.setPage("file://" + note.getHTMLPath());
            } catch (IOException ex) {
                Logger.getLogger(NoteEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        Attachment = new javax.swing.JButton();
        Preview = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        TitleBox = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ContentBox = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        PreviewPane = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Edit Note");

        jSplitPane1.setDividerLocation(440);

        Attachment.setText("Attachment");
        Attachment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AttachmentActionPerformed(evt);
            }
        });

        Preview.setText("Preview");
        Preview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviewActionPerformed(evt);
            }
        });

        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        jLabel1.setText("Title");

        TitleBox.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N

        jLabel2.setText("Content (mml)");

        ContentBox.setColumns(20);
        ContentBox.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        ContentBox.setLineWrap(true);
        ContentBox.setRows(5);
        ContentBox.setWrapStyleWord(true);
        jScrollPane2.setViewportView(ContentBox);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(Attachment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Preview)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE)
                        .addComponent(Save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Cancel))
                    .addComponent(TitleBox, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Attachment)
                    .addComponent(Preview)
                    .addComponent(Cancel)
                    .addComponent(Save))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TitleBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel1);

        PreviewPane.setEditable(false);
        jScrollPane1.setViewportView(PreviewPane);

        jSplitPane1.setRightComponent(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1034, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AttachmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AttachmentActionPerformed
        ArrayList<String> atlist = Util.selectFiles(NoteEditor.this);
        
        atlist.stream().forEach((string) -> {
            ContentBox.insert("@img(src=\"" + string + "\") @\n", ContentBox.getCaretPosition());
            imageList.add(string);
        });
    }//GEN-LAST:event_AttachmentActionPerformed

    private void PreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreviewActionPerformed

        try {
            
            Path p = Files.createTempFile("mNotes", ".mml");
            
            String unfHTML = Util.parseNote(ContentBox.getText());
            String HTML = String.format(unfHTML, TitleBox.getText(), "21-Aug-2015", "23-Jan-2010", ContentBox.getText());
            String url = Util.createHTMLfile(HTML, p.toAbsolutePath().toString());

            PreviewPane.setPage("file://" + url);
            
        } catch (IOException ex) {
            Logger.getLogger(NoteEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PreviewActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        
        if(note == null) {
            note = new Note();
        }
        
        note.title = TitleBox.getText();
        note.takenDate = new Date();
        
        String nRoot = Util.createDirectory(mNConsts.NotePath, note.title) + "/";
        String toWrite = ContentBox.getText();
        
        for (String string : imageList) {
            
            try {
                String extension = string.substring(string.lastIndexOf("."));
                Files.copy(Paths.get(string), Paths.get(nRoot + (++numImages) + extension), StandardCopyOption.REPLACE_EXISTING);
                toWrite = toWrite.replace(string, (nRoot + numImages + extension));
            } catch (IOException ex) {
                Logger.getLogger(NoteEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        try {
            
            Files.deleteIfExists(Paths.get(nRoot+"/Note.mml"));
            Path p = Files.createFile(Paths.get(nRoot + "/Note.mml"));
            note.contentFile = p.toAbsolutePath().toString();
            
            BufferedWriter outputStream = new BufferedWriter(new FileWriter(note.contentFile));
            outputStream.write(toWrite);
            outputStream.flush();
            
        } catch (IOException ex) {
            Logger.getLogger(TaskInput.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(note.Id == -1) {
            noteListModel.addElement(note.title);
            noteList.add(note);
        }
        
        note.insertDB();
        setVisible(false);
    }//GEN-LAST:event_SaveActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_CancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Attachment;
    private javax.swing.JButton Cancel;
    private javax.swing.JTextArea ContentBox;
    private javax.swing.JButton Preview;
    private javax.swing.JEditorPane PreviewPane;
    private javax.swing.JButton Save;
    private javax.swing.JTextField TitleBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
}
