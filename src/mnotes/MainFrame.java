package mnotes;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;

public class MainFrame extends javax.swing.JFrame implements HyperlinkListener {

    
    private String mNotesRoot = "";
    private final String mNotesDBName = "mNotes";
    
    public MainFrame() {

        this.taskListModel = new DefaultListModel<>();
        this.noteListModel = new DefaultListModel<>();
        initComponents();
        
        mNotesRoot = System.getenv("HOME") + "/.mNotes";
        
        if (check_for_files()) {
            do_initialisation_stuff();
            ContentPanel.setVisible(false);
            setSize(403, getHeight());
        } else {
            
        }
    }

    private void do_initialisation_stuff() {

        mNConsts.initConsts(mNotesRoot);
        Util.createNoteDB(mNotesDBName);
        Util.create_root_directory();
        ToDoItem.createDB();
        Note.createDB();
        readTodos();
        readNotes();

    }

    public void readNotes() {
        noteList = Note.getNotes();
        noteList.stream().forEach((item) -> {
            noteListModel.addElement(item.title);
        });
    }

    public void readTodos() {
        todoList = ToDoItem.getToDos();
        todoList.stream().forEach((item) -> {
            taskListModel.addElement(item.title);
        });
    }

    /* These are the global data sets */
    ArrayList<ToDoItem> todoList;
    ArrayList<Note> noteList;
    DefaultListModel<String> noteListModel;
    DefaultListModel<String> taskListModel;

    final int EToDoItem = 0, ENoteItem = 1;
    int WhatIsInEditorPane = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TaskList = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        NotesList = new javax.swing.JList<>();
        NewTaskLab = new javax.swing.JLabel();
        NewNoteLab = new javax.swing.JLabel();
        FullView = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ContentPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Edit = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        NotePad = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("mNotes");
        setBackground(new java.awt.Color(52, 54, 56));
        setMinimumSize(new java.awt.Dimension(403, 600));

        jPanel1.setBackground(new java.awt.Color(52, 54, 56));
        jPanel1.setPreferredSize(new java.awt.Dimension(989, 600));

        jPanel3.setBackground(new java.awt.Color(52, 54, 56));
        jPanel3.setMaximumSize(new java.awt.Dimension(32767, 700));
        jPanel3.setMinimumSize(new java.awt.Dimension(403, 600));
        jPanel3.setPreferredSize(new java.awt.Dimension(403, 600));

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(254, 254, 254));
        jLabel2.setText("Tasks");

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(254, 254, 254));
        jLabel3.setText("Notes");

        jScrollPane3.setBackground(new java.awt.Color(52, 54, 56));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(390, 130));

        TaskList.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        TaskList.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        TaskList.setModel(taskListModel);
        TaskList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        TaskList.setFixedCellWidth(200);
        TaskList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                TaskListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(TaskList);

        jScrollPane4.setBackground(new java.awt.Color(52, 54, 56));
        jScrollPane4.setPreferredSize(new java.awt.Dimension(390, 130));

        NotesList.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        NotesList.setModel(noteListModel);
        NotesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                NotesListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(NotesList);

        NewTaskLab.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        NewTaskLab.setForeground(new java.awt.Color(17, 238, 54));
        NewTaskLab.setText("+ Add Task");
        NewTaskLab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NewTaskLabMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                unhighlight_label(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                highlight_label(evt);
            }
        });

        NewNoteLab.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        NewNoteLab.setForeground(new java.awt.Color(17, 238, 54));
        NewNoteLab.setText("+ Add Note");
        NewNoteLab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NewNoteLabMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                unhighlight_label(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                highlight_label(evt);
            }
        });

        FullView.setForeground(new java.awt.Color(254, 254, 254));
        FullView.setText("Full Window");
        FullView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FullViewActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(254, 254, 254));
        jLabel1.setText("mNotes");

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(22, 213, 32));
        jLabel4.setText("Settings");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel4MouseReleased(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                unhighlight_label(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                highlight_label(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(51, 51, 51)
                        .addComponent(jLabel4))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NewNoteLab))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NewTaskLab))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(FullView)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FullView)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NewTaskLab)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NewNoteLab))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addContainerGap())
        );

        ContentPanel.setBackground(new java.awt.Color(52, 54, 56));

        jPanel2.setBackground(new java.awt.Color(52, 54, 56));

        Edit.setText("Edit");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Edit)
                    .addComponent(Delete))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setBackground(new java.awt.Color(52, 54, 56));

        NotePad.setEditable(false);
        NotePad.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                NotePadHyperlinkUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(NotePad);

        javax.swing.GroupLayout ContentPanelLayout = new javax.swing.GroupLayout(ContentPanel);
        ContentPanel.setLayout(ContentPanelLayout);
        ContentPanelLayout.setHorizontalGroup(
            ContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentPanelLayout.createSequentialGroup()
                .addGroup(ContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContentPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        ContentPanelLayout.setVerticalGroup(
            ContentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ContentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(ContentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewTaskLabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NewTaskLabMouseClicked
        new TaskInput(null, todoList, taskListModel).setVisible(true);
    }//GEN-LAST:event_NewTaskLabMouseClicked

    Color savedColor;
    private void highlight_label(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_highlight_label
        JLabel label = (JLabel) evt.getSource();
        savedColor = label.getForeground();
        label.setForeground(Color.red);
    }//GEN-LAST:event_highlight_label

    private void unhighlight_label(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unhighlight_label
        JLabel label = (JLabel) evt.getSource();
        label.setForeground(savedColor);
    }//GEN-LAST:event_unhighlight_label

    private void NotesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_NotesListValueChanged
        if (evt.getValueIsAdjusting() == false
                && NotesList.getSelectedIndex() != -1) {
            try {
                String url = "file://" + noteList.get(NotesList.getSelectedIndex()).getHTMLPath();
                NotePad.setPage(url);
                WhatIsInEditorPane = ENoteItem;
                goFullScreen();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_NotesListValueChanged

    private void NewNoteLabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NewNoteLabMouseClicked
        new NoteEditor(null, noteList, noteListModel).setVisible(true);
    }//GEN-LAST:event_NewNoteLabMouseClicked

    private void TaskListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_TaskListValueChanged
        if (evt.getValueIsAdjusting() == false
                && TaskList.getSelectedIndex() != -1) {
            try {
                String url = "file://" + todoList.get(TaskList.getSelectedIndex()).getHTMLPath();
                NotePad.setPage(url);
                WhatIsInEditorPane = EToDoItem;
                goFullScreen();
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_TaskListValueChanged

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        try {
            Path p;
            int index;
            switch (WhatIsInEditorPane) {
                case ENoteItem:
                    index = NotesList.getSelectedIndex();
                    p = Paths.get(noteList.get(index).contentFile);
                    Util.deleteDirectory(p.getParent().toString());
                    ((Note) noteList.get(index)).DeleteFromDB();
                    noteList.remove(index);
                    noteListModel.remove(index);
                    break;
                case EToDoItem:
                    index = TaskList.getSelectedIndex();
                    p = Paths.get(todoList.get(index).contentFile);
                    Util.deleteDirectory(p.getParent().toString());
                    ((ToDoItem) todoList.get(index)).DeleteFromDB();
                    taskListModel.remove(index);
                    todoList.remove(index);
                    break;
            }
            NotePad.setPage("file://");
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        switch (WhatIsInEditorPane) {
            case ENoteItem:
                new NoteEditor(noteList.get(NotesList.getSelectedIndex()), noteList, noteListModel).setVisible(true);
                break;
            case EToDoItem:
                new TaskInput(todoList.get(TaskList.getSelectedIndex()), todoList, taskListModel).setVisible(true);
                break;
        }
    }//GEN-LAST:event_EditActionPerformed

    private void FullViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FullViewActionPerformed
        if (FullView.isSelected()) {
            goFullScreen();
        } else {
            ContentPanel.setVisible(false);
            setSize(403, getHeight());
        }
    }//GEN-LAST:event_FullViewActionPerformed

    private void jLabel4MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseReleased
        new Configurer(Configurer.EDITCONFIG).setVisible(true);
    }//GEN-LAST:event_jLabel4MouseReleased

    private void NotePadHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_NotePadHyperlinkUpdate
        try {
            NotePad.setPage(evt.getURL());
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_NotePadHyperlinkUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ContentPanel;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Edit;
    private javax.swing.JCheckBox FullView;
    private javax.swing.JLabel NewNoteLab;
    private javax.swing.JLabel NewTaskLab;
    private javax.swing.JEditorPane NotePad;
    private javax.swing.JList<String> NotesList;
    private javax.swing.JList<String> TaskList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void hyperlinkUpdate(HyperlinkEvent e) {
        try {
            NotePad.setPage(e.getURL());
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void goFullScreen() {
        FullView.setSelected(true);
        ContentPanel.setVisible(true);
        if (getWidth() < 1000) {
            setSize(1000, getHeight());
        }
    }

    private boolean check_for_files() {
        
        File f = new File(mNotesRoot + "/DB.props");
        if (!f.exists()) {
            try {
                Files.createDirectories(Paths.get(mNotesRoot));
                mNConsts.initConsts(mNotesRoot);
                Util.create_root_directory();
                new Configurer(Configurer.CREATECONFIG).setVisible(true);
                return false;
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return true;
    }
}
